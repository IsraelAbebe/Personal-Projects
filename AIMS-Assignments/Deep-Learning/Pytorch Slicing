{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Israel Azime Class Exercises",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOhQopC0QKWACsduvFHPqqQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/IsraelAbebe/Personal-Projects-and-Exercises/blob/master/AIMS-Assignments/Deep-Learning/Pytorch%20Slicing\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Rz1D0Z2cidJ8",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "s9o_vZFh3rRe",
        "colab_type": "text"
      },
      "source": [
        "# Question 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZM6dFU8nigYd",
        "colab_type": "code",
        "outputId": "048a51fd-50d8-49b9-f696-688ca7e1f3e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 238
        }
      },
      "source": [
        "a = torch.full((13,13),1)\n",
        "a[:,[1,6,11]],a[[1,6,11],:] = 2,2\n",
        "a[2:4,2:4],a[8:10,2:4],a[2:4,8:10],a[8:10,8:10] = 3,3,3,3 \n",
        "a"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[1., 2., 1., 1., 1., 1., 2., 1., 1., 1., 1., 2., 1.],\n",
              "        [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],\n",
              "        [1., 2., 3., 3., 1., 1., 2., 1., 3., 3., 1., 2., 1.],\n",
              "        [1., 2., 3., 3., 1., 1., 2., 1., 3., 3., 1., 2., 1.],\n",
              "        [1., 2., 1., 1., 1., 1., 2., 1., 1., 1., 1., 2., 1.],\n",
              "        [1., 2., 1., 1., 1., 1., 2., 1., 1., 1., 1., 2., 1.],\n",
              "        [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],\n",
              "        [1., 2., 1., 1., 1., 1., 2., 1., 1., 1., 1., 2., 1.],\n",
              "        [1., 2., 3., 3., 1., 1., 2., 1., 3., 3., 1., 2., 1.],\n",
              "        [1., 2., 3., 3., 1., 1., 2., 1., 3., 3., 1., 2., 1.],\n",
              "        [1., 2., 1., 1., 1., 1., 2., 1., 1., 1., 1., 2., 1.],\n",
              "        [2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2., 2.],\n",
              "        [1., 2., 1., 1., 1., 1., 2., 1., 1., 1., 1., 2., 1.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "apkzKnmJkGT_",
        "colab_type": "text"
      },
      "source": [
        "# Question 2"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kftFxFAjkFia",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import torch\n",
        "from time import perf_counter \n",
        "\n",
        "matrix1,matrix2 = torch.empty((500,500)).normal_(0.5,1),torch.randn((500,500)).normal_(0.5,1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dFezhjnMiyS2",
        "colab_type": "code",
        "outputId": "51fa3202-8a92-459a-9cef-13715375ce30",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# %%time\n",
        "t1_start = perf_counter()\n",
        "result = torch.mul(matrix1,matrix2)\n",
        "t1_stop = perf_counter() \n",
        "\n",
        "print(\"Elapsed time during the whole program in seconds:\", \n",
        "                                        t1_stop-t1_start) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Elapsed time during the whole program in seconds: 0.0008092359999949394\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "V4DDaNGWq2qe",
        "colab_type": "text"
      },
      "source": [
        "# Question 3"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zefoU6evpNSc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def mul_row2(input_tensor):\n",
        "    for i in range(input_tensor.size(0)):\n",
        "        for j in range(input_tensor.size(1)):\n",
        "            input_tensor[i,j] =  torch.mul(i+1,input_tensor[i,j])\n",
        "\n",
        "    return input_tensor\n",
        "\n",
        "def mul_row(input_tensor):\n",
        "    for i in range(input_tensor.size(0)):\n",
        "            input_tensor[i] =  torch.mul(i+1,input_tensor[i])\n",
        "    return input_tensor\n",
        "\n",
        "def mul_row_fast(input_tensor):\n",
        "    n = input_tensor.size(0)\n",
        "    input_tensor = torch.mul(torch.arange(1,n+1,1).view(n,-1),input_tensor)\n",
        "    return input_tensor"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tTIQeLJetS_o",
        "colab_type": "code",
        "outputId": "65df7019-de49-4c76-a4c2-8621dac96b19",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "m = torch.full((4,8),2.0)\n",
        "print(m)\n",
        "mul_row(m)\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensor([[2., 2., 2., 2., 2., 2., 2., 2.],\n",
            "        [2., 2., 2., 2., 2., 2., 2., 2.],\n",
            "        [2., 2., 2., 2., 2., 2., 2., 2.],\n",
            "        [2., 2., 2., 2., 2., 2., 2., 2.]])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[2., 2., 2., 2., 2., 2., 2., 2.],\n",
              "        [4., 4., 4., 4., 4., 4., 4., 4.],\n",
              "        [6., 6., 6., 6., 6., 6., 6., 6.],\n",
              "        [8., 8., 8., 8., 8., 8., 8., 8.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ykVUPafyxyDU",
        "colab_type": "code",
        "outputId": "40592d42-ef3f-4a39-a94f-bba1f061e94a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        }
      },
      "source": [
        "\n",
        "m = torch.full((4,8),2.0)\n",
        "print(m)\n",
        "mul_row_fast(m)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "tensor([[2., 2., 2., 2., 2., 2., 2., 2.],\n",
            "        [2., 2., 2., 2., 2., 2., 2., 2.],\n",
            "        [2., 2., 2., 2., 2., 2., 2., 2.],\n",
            "        [2., 2., 2., 2., 2., 2., 2., 2.]])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([[2., 2., 2., 2., 2., 2., 2., 2.],\n",
              "        [4., 4., 4., 4., 4., 4., 4., 4.],\n",
              "        [6., 6., 6., 6., 6., 6., 6., 6.],\n",
              "        [8., 8., 8., 8., 8., 8., 8., 8.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zf5dz9fXwhnM",
        "colab_type": "code",
        "outputId": "53a6fee4-3df3-4e09-e0b5-ff2fc9da1358",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "matrix1= torch.empty((1000,400)).normal_(0.5,1)\n",
        "t1_start = perf_counter()\n",
        "result = mul_row(matrix1)\n",
        "t1_stop = perf_counter() \n",
        "\n",
        "print(\"Elapsed time during the whole program in seconds:\", \n",
        "                                        t1_stop-t1_start) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Elapsed time during the whole program in seconds: 0.01606515000000286\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h7ZmpoFJtlMa",
        "colab_type": "code",
        "outputId": "5181728f-296a-4352-f23e-4e4fe5517f30",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "matrix1= torch.empty((1000,400)).normal_(0.5,1)\n",
        "t1_start = perf_counter()\n",
        "result = mul_row_fast(matrix1)\n",
        "t1_stop = perf_counter() \n",
        "\n",
        "print(\"Elapsed time during the whole program in seconds:\", \n",
        "                                        t1_stop-t1_start) "
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Elapsed time during the whole program in seconds: 0.0012700510000058784\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TzBULn2PMC-P",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}